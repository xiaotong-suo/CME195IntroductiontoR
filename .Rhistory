linearModel3 = lm(price~carat + cut.L + cut.Q + cut.C + cut^4 )
linearModel3 = lm(price~carat + cut.L + cut.Q + cut.C + cut^4, data = diamonds)
names(diamonds)
linearModel3 = lm(price~carat + cut, data = diamonds)
linearModel3
linearModel3 = lm(price~carat + cut + clarity + depth, data = diamonds)
linearModel3
glm
?glm
?t.test
?logit
?glm
hist(diamonds$carat)
boxplot(diamonds$carat)
boxplot(diamonds$price)
boxplot(diamonds$)
boxplot(diamonds$x)
mean(diamonds$x)
?t.test
t.test(diamonds, mu = 5.731157, alternative= "greater", conf.level = 0.95)
boxplot(diamonds$x)
t.test(diamonds$x, mu = 5.731157, alternative= "greater", conf.level = 0.95)
t.test(diamonds$x, mu = 5.731157, alternative= "less", conf.level = 0.95)
t.test(diamonds$x, mu = 5.731157, alternative= "less", conf.level = 0.99)
boxplot(diamonds$x)
t.test(diamonds$x, mu = 5.731157, alternative= "less", conf.level = 0.99)
t.test(diamonds$x, mu = 5.731157, alternative= "two-sided", conf.level = 0.99)
t.test(diamonds$x, mu = 5.731157, alternative= "two.sided", conf.level = 0.99)
?glmnet
library(glmnet)
?glmnet
test = t.test(diamonds$x, mu = 5.731157, alternative= "two.sided", conf.level = 0.99)
?airquality
?sleep
data(sleep)
sleep[1,]
boxplot(sleep~group)
attach(sleep)
boxplot(sleep~group)
names(sleep)
boxplot(extra~group)
t.test(extra~group, mu = 0, alternative = 'two.sided', conf.level = 0.99, var.eq = F, paired = F)
t.test(extra[group==1],extra[group==2])
t.test(extra[group==1],extra[group==2], var.eq = T)
var(extra[group==1])
var(extra[group ==2])
?leveneTest
??levenTest
??leveneTest
library(car)
instll.packages('car')
install.packages('car')
library(car)
leveneTest
leveneTest(extra~group)
library(ggplot2)
data(diamonds)
str(diamonds)
?aov
ANOVA = aov(diamonds ~ cut, data = diamonds)
ANOVA = aov(carat ~ cut, data = diamonds)
ANOVA
summary(ANOVA)
TukeyHSD(ANOVA)
plot(TukeyHSD(ANOVA))
plot(TukeyHSD(ANOVA), las = 1)
?rep()
rank(x, ties.method='min') <= 3
x
which(rank(x, ties.method='min') ==3)
x = rep(1:10, length = 20)
x
which(rank(x, ties.method='min') ==1)
which(rank(x, ties.method='min'))
rank(x,ties.method =='min')
rank(x)
rank
?rank
rank(x,ties.method = 'min')
(r1 <- rank(x1 <- c(3, 1, 4, 15, 92)))
x
rank(x)
m = matrix(c(1,2,3,4), nrow = 2)
m
m[,2] = c('a',)
m[,2] = c('a','b')
m
m = as.data.frame(m)
m
as.matrix(m)
n = as.matrix(m)
class(n)
v = data.matrix(m)
v
class(v)
v1= rep(0, times = 100)
v1
v1 = rep(1:10, each = 2)
v1
v1
which(v1 == 3)
v1 ==3
v1[v1 ===3]
v1[v1 ==3]
which.min(v1)
which.max(v1)
which(v1 == min(v1))
v1[v1==min(v1)]
v1==min(v1)
sum(v1==min(v1))
v1[v1 = max(v1)]
v1
v1[10]
v1[v1 == max(v1)]
data(diamonds)
library(ggplot2)
data(diamonds)
splited_diamonds = split(diamonds, diamonds$cut)
splited_diamonds
class(splited_diamonds)
splited_diamonds$Good
splited_diamonds = split(diamonds, diamonds$cut)
set.seed(1410)
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
splited_diamonds = split(dsmall, dsmall$cut)
splited_diamonds
splited_diamonds[[1]]
splited_diamonds$Fair
splited_diamonds$Fair[1,]
class(splited_diamonds[[1]])
class(splited_diamonds$Fair)
dim(splited_diamonds[[1]])
class(splited_diamonds$Fair)
diamonds[11416,]
str(diamonds)
diamonds$cut[1:10,]
diamonds$cut[1:10]
as.numeric(diamonds$cut[1:10])
summary(diamonds)
str(lm)
lm
str(lm)
?lm
str(splited_diamonds)
summary(splited_diamonds)
a = list(v1=c("a","b"),v2 = c(1,2))
summary(a)
a
A = matrix(c(1,2,3,4), 2)
A
apply(A, MARGIN = 2, sum)
apply(A, MARGIN = 1, sum)
apply(A, MARGIN = 1, mean)
apply(A, MARGIN = 2, mean )
apply(A, MARGIN = 2, sd)
sd(c(1,2,3,4))
?apply
? seq_len(
)
?seq_len
seq_len(10)
?apply
N=10;P=5;A=matrix(rnorm(N*P),ncol=P)
A
A = matrix(c(1,2,3,4),nrow = 2)
A
N=10;P=5;A=matrix(rnorm(N*P),ncol=P)
N=1000;A=matrix(rnorm(N*P),ncol=P) sumrow=numeric(N)
N=1000;A=matrix(rnorm(N*P),ncol=P)
sumrow=numeric(N)
sumrow
sumrow = rep(0,N)
system.Ime(for (i in 1:N) sumrow[i]=sum(A[i,]))
system.time(for (i in 1:N) sumrow[i]=sum(A[i,]))
system.Ime(apply(A,MARGIN=1,FUN=sum))
system.tifme(apply(A,MARGIN=1,FUN=sum))
system.time(apply(A,MARGIN=1,FUN=sum))
N=10000;A=matrix(rnorm(N*P),ncol=P)
sumrow = rep(0,N)
system.time(apply(A,MARGIN=1,FUN=sum))
system.time(for (i in 1:N) sumrow[i]=sum(A[i,]))
N
system.time(rowSums(A))
dim(A)
system.time(rowSums(A))
system.time(for (i in 1:N) sumrow[i]=sum(A[i,]))
system.time(apply(A,MARGIN=1,FUN=sum))
rowMedians
?rowMedians
median(1:10)
1:10
library(ggplot2)
data(diamonds)
str(diamonds)
?lm
linearModel = lm(price~carat,
data = diamonds)
summary(linearModel)
summary(linearModel)
summary(linearModel)
linearModel = lm(log(price)~log(carat),
data = diamonds)
summary(linearModel)
str(summary(linearModel))
summary(linearModel)$coefficient
summary(linearModel)$coefficients
summary(linearModel)$coefficients[,1]
summaryoflinearModel = summary(linearModel)
summaryoflinearModel$r.squared
linearModel = lm(log(price)~log(carat) - 1,
data = diamonds)
summary(linearModel)$coefficients[,1]
summary(linearModel)
linearModel$residuals
linearModel$coefficients
sum2 = summary(linearModel)
sum2$r.squared
linearModel2 = lm(price~., data = diamonds)
attributes()
attributes(linearModel2)
summary(linearModel2)
linearModel2 = lm(price~I(carat^2), data = diamonds)
summary(linearModel2)
linearModel2 = lm(price~carat^2, data = diamonds)
attributes(linearModel2)
summary(linearModel2)
linearModel2 = lm(price~ I(carat^2), data = diamonds)
summary(linearModel2)
linearModel2 = lm(price~ poly(carat,2), data = diamonds)
summary(linearModel2)
linearModel2 = lm(price~ carat^3, data = diamonds)
summary(linearModel2)
linearModel2 = lm(price~ carat, data = diamonds)
summary(linearModel2)
linearModel2 = lm(price~ I(carat^3), data = diamonds)
summary(linearModel2)
linearModel2 = lm(price~ carat^3, data = diamonds)
summary(linearModel2)
summary(linearModel2)
sumLinearModel2 = summary(linearModel2)
sumLinearModel2$sigma
?glm
data(sleep)
?sleep
boxplot(extra~group)
attach(sleep)
boxplot(extra~group)
boxplot(diamonds$x)
test = t.test(diamonds$x, mu = 5.731157,
alternative= "two.sided",
conf.level = 0.99)
test
t.test(extra~group, mu = 0,
alternative = 'two.sided',
conf.level = 0.99, var.eq = T, paired = F)
boxplot(diamonds$x)
mean(iamonds$x)
mean(diamonds$x)
test = t.test(diamonds$x, mu = 5,
alternative= "two.sided",
conf.level = 0.99)
test
test$p.value
library(car)
#check if two group has the same variance
leveneTest(extra~group)
var(extra[group==1])
var(extra[group==2])
ANOVA = aov(carat ~ cut, data = diamonds)
ANOVA
summary(ANOVA)
TukeyHSD(ANOVA)
edit()
edit(airquality)
vi(airquality)
xedit(airquality)
xemacs
xemacs(airquality)
edit(mean, editor = "xedit")
edit(airquality, editor = "xedit")
library(splines)
source("readnat.R")
makeall=function(season,wili){
all=matrix(NA,nrow=11,ncol=52)
for(i in 1:11){
o=season==(i+6)
all[i,]=wili[o][1:52]
}
return(all)
}
}
train.index = 1:16
time  = 52
k0 = 20
weight = c(rep(1, length = k0), rep(20, length = 52 - k0))
model = smoothingsplinefit(all, all.obj, train_index = 1:16, k0 = 20, weight =weight, time =  52)
smoothingsplinefit = function(data.obj, smooth.obj, train_index, k0, weight,time){
#originaldata consists of the data which has not been transformed
#smootheddata consists of the data which has been smoothed
#train_index takes a sequence of index indicating the train data
#cutoff represents the time which the data is available
#weight is a vector of weight information
#for now, I am just using the last row of the original_data as a test data
n =  length(data.obj)
x = 1:time
train.matrix  = cbind(smooth.obj[[train_index]]$signal)
y_secondhalf = as.numeric((1/(n-1)) * colSums(train.matrix))
y_firsthalf = data.obj[[n]]$signal[1:k0]
y = c(y_firsthalf, y_secondhalf)
smooth.model = smooth.spline(x = x, y = y, w = weight, cv = TRUE)
y_secondhalf_predicted = predict(smooth.model, x = ((k0+1):time))$y
yhat = c(y_firsthalf, y_secondhalf_predicted)
return(yhat)
}
time  = 52
k0 = 20
weight = c(rep(1, length = k0), rep(20, length = 52 - k0))
model = smoothingsplinefit(all, all.obj, train_index = 1:16, k0 = 20, weight =weight, time =  52)
all.obj = model$smooth.obj
eb.fitSmoothCurves(all, method= "ss", cv=TRUE, cv.rule="min", tf.ord=2, verbose=FALSE)
a
install.packages('glmnet')
library(devtools)
insalibrary(devtools)
install_github("statsmaths/glmgen", subdir="R_pkg/glmgen")
library(devtools)
install_github("statsmaths/glmgen", subdir="R_pkg/glmgen")
?install_github
library(devtools)
install_github("statsmaths/glmgen", subdir="R_pkg/glmgen")
library(glmgen)
- train.data[,"classId"]=="early"
dat.obj= makealllist(season, wili)
smooth.obj = fitSmoothCurves(dat.obj, method = "ss", cv = TRUE, cv.rule = "min")
install.packages('ftsa')
library(ftsa)
Australiasmoothfertility
Australiasmoothfertility
typeof(http://health.sina.com.cn/hc/2015-08-17/doc-ifxfxray5617550.shtml)
typeof(Australiasmoothfertility)
Australiasmoothfertility$x
Australiasmoothfertility$y
Australiasmoothfertility$time
Australiasmoothfertility$xname
Australiasmoothfertility$yname
?ftsm
?fits
?fts
Australiasmoothfertility
ElNino2011smooth
typeof(ElNino2011smooth)
ElNino2011smooth$x
ElNino2011smooth$y
ElNino2011smooth$time
plot(ElNino2011smooth$y[,1])
?fta
typeof(ElNino2011smooth)
typeof(Australiasmoothfertility)
typeof(Australiafertility)
class(Australiafertility)
?fds
?sfts
ElNino2011smooth$time
ElNino2011smooth$xname
ElNino2011smooth$x
ElNino2011smooth$y
ElNino2011smooth$y[,62]
install.packages("pander")
library(ftsa)
?dynupdate
?sfts
ElNino$y
?sfts
?ts
?sfts
library(ftsa)
as.numeric(ElNino$y)
?dynupdate
?ar
ar(max_diff_each_season)
```
?ar
?ar
median(x <- 1:10)
x
meadian(x = 1:10)
median(x = 1:10)
?rnorm()
y = rnorm(1, mean = 3, sd = 4)
y
(y = rnorm(1, mean = 3, sd = 4))
x = 1:3
x
m = 1:3
m
m = 1:3
m
f1 = function(x, i, j){
x[i] = 3
x[j] = 4
}
f1 = function(x, i, j){
x[i] = 3
x[j] = 4
}
f1 = function(x, i, j){
x[i] = 3
x[j] = 4
}
y = f1(x = m, i = 1, j = 2)
y
f1 = function(x, i, j){
x[i] = 3
x[j] = 4
return(x)
}
y = f1(x = m, i = 1, j = 2)
y
f1 = function(x, i, j){
x[i] = 3
x[j] = 4
}
y = f1(x = m, i = 1, j = 2)
y
f1 = function(x, i, j){
x[i] = 3
x[j] = 4
x
}
y = f1(x = m, i = 1, j = 2)
y
m
v1 = c(3,2,1,NA)
v1
mean(v1)
mean(v1, na.rm = TRUE)
?mean
v1 = c(NA,3,2,1,NA)
mean(v1, na.rm = TRUE)
v1 = vector('double',2)
v1
3.1
3.2
1
v2 = rep(2, times = 100)
v2
v2 = rep(NA, times = 100)
v3 = rep(NA, times = 100)
v3
?rep
rep(1:10,2:10)
rep(1:10,rep(2:10))
rep(1:10,rep(2,10))
rep(1:10, each = 2)
x = rbinom(10,21,0.5)
x = rbinom(10,21,0.5)
x
x>5
m = x>5
m = x>5
m
x[m]
x
x[x<10]
x<10
sum(c(1,3,5))
sum(x>10)
x=rnorm(100)
mean(x>0)
?rnorm
rbinom
?rbinom
f1=factor('Yes',levels=c('Yes','No'))
f1
f1=factor('Yes',levels=c('Yes','No'))
f1
summary(f1)
f1=factor(c('Yes',"No","Yes", "No","No" ),levels=c('Yes','No'))
f1
summary(f1)
?factor
table(f1)
f1=factor(c('nes',"No","Yes", "No","No" ),levels=c('Yes','No'))
f1
f1=factor(c('nes',"no","Yes", "No","No" ),levels=c('Yes','No'))
f1
data = letters[1:10]
data
F1 = factor(data, ordered = TRUE)
F1
V=c('A','A','C','B','B',"C");
X=1:5;
Y=rnorm(5);
L=list(X,Y,V)
L
X
L[[1]]
L[[1]][5]
names(L) = c("l1","l2","l3")
L$l1
l$l1[5]
L$l1[5]
stack.x
getwd
getwd()
setwd("/Users/xiaotong/Desktop/CME195IntroductiontoR/")
read.csv(file = "EarmarksbyMember08.xls")
read.cvs(file = "EarmarksbyMember08.csv", header = TRUE, skip = 3)
read.csv(file = "EarmarksbyMember08.csv", header = TRUE, skip = 3)
data= read.csv(file = "EarmarksbyMember08.csv", header = TRUE, skip = 3)
data[1,]
dim(data)
